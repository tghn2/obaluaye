"""Pathway sequence first revision

Revision ID: 1fae884e42cc
Revises: fb120f8fc198
Create Date: 2023-09-04 13:20:32.725502

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy_utils import TSVectorType, CountryType, LocaleType

# revision identifiers, used by Alembic.
revision = "1fae884e42cc"
down_revision = "fb120f8fc198"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "group",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("modified", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("isActive", sa.Boolean(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("title_vector", TSVectorType(), sa.Computed("to_tsvector('pg_catalog.simple', 'title')", persisted=True), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("description_vector", TSVectorType(), sa.Computed("to_tsvector('pg_catalog.simple', 'description')", persisted=True), nullable=False),
        sa.Column("country", postgresql.ARRAY(CountryType(length=2)), nullable=True),
        sa.Column("spatial", sa.String(), nullable=True),
        sa.Column("language", LocaleType(), nullable=True),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index(op.f("ix_group_description"), "group", ["description"], unique=False)
    op.create_index("ix_group_description_vector", "group", ["description_vector"], unique=False, postgresql_using="gin")
    op.create_index(op.f("ix_group_id"), "group", ["id"], unique=False)
    op.create_index(op.f("ix_group_title"), "group", ["title"], unique=False)
    op.create_index("ix_group_title_vector", "group", ["title_vector"], unique=False, postgresql_using="gin")
    op.create_table(
        "pathway",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("modified", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("isPrivate", sa.Boolean(), nullable=False),
        sa.Column("isProtected", sa.Boolean(), nullable=False),
        sa.Column(
            "pathType",
            postgresql.ENUM(
                "PERSONAL",
                "RESEARCH",
                name="pathwaytype",
                checkfirst=True,
            ),
            nullable=False
        ),
        sa.Column("country", postgresql.ARRAY(CountryType(length=2)), nullable=True),
        sa.Column("spatial", sa.String(), nullable=True),
        sa.Column("temporalStart", sa.DateTime(timezone=True), nullable=True),
        sa.Column("temporalEnd", sa.DateTime(timezone=True), nullable=True),
        sa.Column("language", LocaleType(), nullable=True),
        sa.Column("bibliographicCitation", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index(op.f("ix_pathway_id"), "pathway", ["id"], unique=False)
    op.create_table(
        "subject",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("term", sa.String(length=64), nullable=False),
        sa.Column("term_vector", TSVectorType(), sa.Computed("to_tsvector('pg_catalog.simple', 'term')", persisted=True), nullable=False),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index(op.f("ix_subject_id"), "subject", ["id"], unique=False)
    op.create_index(op.f("ix_subject_term"), "subject", ["term"], unique=True)
    op.create_index("ix_subject_term_vector", "subject", ["term_vector"], unique=False, postgresql_using="gin")
    op.create_table(
        "group_subject",
        sa.Column("group_id", sa.UUID(), nullable=False),
        sa.Column("subject_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], ),
        sa.ForeignKeyConstraint(["subject_id"], ["subject.id"], ),
        sa.PrimaryKeyConstraint("group_id", "subject_id")
    )
    op.create_table(
        "invitation",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("full_name", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column(
            "response",
            postgresql.ENUM(
                "WAITING",
                "ACCEPTED",
                "REFUSED",
                name="invitationresponsetype",
                checkfirst=True,
            ),
            nullable=False
        ),
        sa.Column("sender_id", sa.UUID(), nullable=False),
        sa.Column("pathway_id", sa.UUID(), nullable=False),
        sa.Column("group_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["pathway_id"], ["pathway.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["sender_id"], ["user.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email", "pathway_id", "group_id", name="_pathway_invitation_uc")
    )
    op.create_index(op.f("ix_invitation_email"), "invitation", ["email"], unique=False)
    op.create_index(op.f("ix_invitation_full_name"), "invitation", ["full_name"], unique=False)
    op.create_index(op.f("ix_invitation_id"), "invitation", ["id"], unique=False)
    op.create_table(
        "pathway_subject",
        sa.Column("pathway_id", sa.UUID(), nullable=False),
        sa.Column("subject_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["pathway_id"], ["pathway.id"], ),
        sa.ForeignKeyConstraint(["subject_id"], ["subject.id"], ),
        sa.PrimaryKeyConstraint("pathway_id", "subject_id")
    )
    op.create_table(
        "pathwaydescription",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("pathway_id", sa.UUID(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("language", LocaleType(), nullable=False),
        sa.Column("description_vector", TSVectorType(), sa.Computed("to_tsvector('pg_catalog.simple', 'description')", persisted=True), nullable=False),
        sa.ForeignKeyConstraint(["pathway_id"], ["pathway.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index("ix_pathway_description_vector", "pathwaydescription", ["description_vector"], unique=False, postgresql_using="gin")
    op.create_index(op.f("ix_pathwaydescription_description"), "pathwaydescription", ["description"], unique=False)
    op.create_index(op.f("ix_pathwaydescription_id"), "pathwaydescription", ["id"], unique=False)
    op.create_table(
        "pathwaytitle",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("pathway_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("language", LocaleType(), nullable=False),
        sa.Column("title_vector", TSVectorType(), sa.Computed("to_tsvector('pg_catalog.simple', 'title')", persisted=True), nullable=False),
        sa.ForeignKeyConstraint(["pathway_id"], ["pathway.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index("ix_pathway_title_vector", "pathwaytitle", ["title_vector"], unique=False, postgresql_using="gin")
    op.create_index(op.f("ix_pathwaytitle_id"), "pathwaytitle", ["id"], unique=False)
    op.create_index(op.f("ix_pathwaytitle_title"), "pathwaytitle", ["title"], unique=False)
    op.create_table(
        "role",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("researcher_id", sa.UUID(), nullable=False),
        sa.Column("group_id", sa.UUID(), nullable=False),
        sa.Column(
            "responsibility",
            postgresql.ENUM(
                "CUSTODIAN",
                "CURATOR",
                "RESEARCHER",
                "VIEWER",
                name="roletype",
                checkfirst=True,
            ),
            nullable=False
        ),
        sa.Column("pathway_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], ),
        sa.ForeignKeyConstraint(["pathway_id"], ["pathway.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["researcher_id"], ["user.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index(op.f("ix_role_id"), "role", ["id"], unique=False)
    op.create_table(
        "theme",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("modified", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column("country", postgresql.ARRAY(CountryType(length=2)), nullable=True),
        sa.Column("spatial", sa.String(), nullable=True),
        sa.Column("language", LocaleType(), nullable=True),
        sa.Column("pathway_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["pathway_id"], ["pathway.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index(op.f("ix_theme_id"), "theme", ["id"], unique=False)
    op.create_table(
        "user_subject",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("subject_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["subject_id"], ["subject.id"], ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ),
        sa.PrimaryKeyConstraint("user_id", "subject_id")
    )
    op.create_table(
        "node",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("modified", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column(
            "formType",
            postgresql.ENUM(
                "VALUE",
                "VALUERANGE",
                "SCALE",
                "BOOLEAN",
                "SELECTONE",
                "SELECTMANY",
                "SELECTBRANCH",
                "UPLOAD",
                name="nodetype",
                checkfirst=True,
            ),
            nullable=False
        ),
        sa.Column("language", LocaleType(), nullable=True),
        sa.Column("pathway_id", sa.UUID(), nullable=False),
        sa.Column("theme_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["pathway_id"], ["pathway.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["theme_id"], ["theme.id"], ),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index(op.f("ix_node_id"), "node", ["id"], unique=False)
    op.create_table(
        "theme_subject",
        sa.Column("theme_id", sa.UUID(), nullable=False),
        sa.Column("subject_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["subject_id"], ["subject.id"], ),
        sa.ForeignKeyConstraint(["theme_id"], ["theme.id"], ),
        sa.PrimaryKeyConstraint("theme_id", "subject_id")
    )
    op.create_table(
        "themedescription",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("theme_id", sa.UUID(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("language", LocaleType(), nullable=False),
        sa.Column("description_vector", TSVectorType(), sa.Computed("to_tsvector('pg_catalog.simple', 'description')", persisted=True), nullable=False),
        sa.ForeignKeyConstraint(["theme_id"], ["theme.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index("ix_theme_description_vector", "themedescription", ["description_vector"], unique=False, postgresql_using="gin")
    op.create_index(op.f("ix_themedescription_description"), "themedescription", ["description"], unique=False)
    op.create_index(op.f("ix_themedescription_id"), "themedescription", ["id"], unique=False)
    op.create_table(
        "themetitle",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("theme_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("language", LocaleType(), nullable=False),
        sa.Column("title_vector", TSVectorType(), sa.Computed("to_tsvector('pg_catalog.simple', 'title')", persisted=True), nullable=False),
        sa.ForeignKeyConstraint(["theme_id"], ["theme.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index("ix_theme_title_vector", "themetitle", ["title_vector"], unique=False, postgresql_using="gin")
    op.create_index(op.f("ix_themetitle_id"), "themetitle", ["id"], unique=False)
    op.create_index(op.f("ix_themetitle_title"), "themetitle", ["title"], unique=False)
    op.create_table(
        "nodeform",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("node_id", sa.UUID(), nullable=False),
        sa.Column("form", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("language", LocaleType(), nullable=False),
        sa.ForeignKeyConstraint(["node_id"], ["node.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index(op.f("ix_nodeform_id"), "nodeform", ["id"], unique=False)
    op.create_table(
        "nodequestion",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("node_id", sa.UUID(), nullable=False),
        sa.Column("question", sa.String(), nullable=True),
        sa.Column("language", LocaleType(), nullable=False),
        sa.ForeignKeyConstraint(["node_id"], ["node.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index(op.f("ix_nodequestion_id"), "nodequestion", ["id"], unique=False)
    op.create_index(op.f("ix_nodequestion_question"), "nodequestion", ["question"], unique=False)
    op.create_table(
        "resource",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("modified", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column(
            "resourceType",
            postgresql.ENUM(
                "MARKDOWN",
                "DOWNLOAD",
                "WEBLINK",
                name="resourcetype",
                checkfirst=True,
            ),
            nullable=False
        ),
        sa.Column("language", LocaleType(), nullable=True),
        sa.Column("pathway_id", sa.UUID(), nullable=False),
        sa.Column("theme_id", sa.UUID(), nullable=False),
        sa.Column("node_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["node_id"], ["node.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["pathway_id"], ["pathway.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["theme_id"], ["theme.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index(op.f("ix_resource_id"), "resource", ["id"], unique=False)
    op.create_table(
        "response",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("modified", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("language", LocaleType(), nullable=True),
        sa.Column("answer", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("node_id", sa.UUID(), nullable=False),
        sa.Column("respondent_id", sa.UUID(), nullable=False),
        sa.Column("group_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["node_id"], ["node.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["respondent_id"], ["user.id"], ),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index(op.f("ix_response_id"), "response", ["id"], unique=False)
    op.create_table(
        "comment",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("modified", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("resolved", sa.Boolean(), nullable=False),
        sa.Column("language", LocaleType(), nullable=True),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("researcher_id", sa.UUID(), nullable=False),
        sa.Column("response_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["researcher_id"], ["user.id"], ),
        sa.ForeignKeyConstraint(["response_id"], ["response.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index(op.f("ix_comment_id"), "comment", ["id"], unique=False)
    op.create_table(
        "resourcecontent",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("resource_id", sa.UUID(), nullable=False),
        sa.Column("content", sa.String(), nullable=True),
        sa.Column("language", LocaleType(), nullable=False),
        sa.ForeignKeyConstraint(["resource_id"], ["resource.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index(op.f("ix_resourcecontent_id"), "resourcecontent", ["id"], unique=False)
    op.create_table(
        "resourcedescription",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("resource_id", sa.UUID(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("language", LocaleType(), nullable=False),
        sa.Column("description_vector", TSVectorType(), sa.Computed("to_tsvector('pg_catalog.simple', 'description')", persisted=True), nullable=False),
        sa.ForeignKeyConstraint(["resource_id"], ["resource.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index("ix_resource_description_vector", "resourcedescription", ["description_vector"], unique=False, postgresql_using="gin")
    op.create_index(op.f("ix_resourcedescription_description"), "resourcedescription", ["description"], unique=False)
    op.create_index(op.f("ix_resourcedescription_id"), "resourcedescription", ["id"], unique=False)
    op.create_table(
        "resourcetitle",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("resource_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("language", LocaleType(), nullable=False),
        sa.Column("title_vector", TSVectorType(), sa.Computed("to_tsvector('pg_catalog.simple', 'title')", persisted=True), nullable=False),
        sa.ForeignKeyConstraint(["resource_id"], ["resource.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id")
    )
    op.create_index("ix_resource_title_vector", "resourcetitle", ["title_vector"], unique=False, postgresql_using="gin")
    op.create_index(op.f("ix_resourcetitle_id"), "resourcetitle", ["id"], unique=False)
    op.create_index(op.f("ix_resourcetitle_title"), "resourcetitle", ["title"], unique=False)
    op.drop_constraint("token_authenticates_id_fkey", "token", type_="foreignkey")
    op.create_foreign_key("token_authenticates_id_fkey", "token", "user", ["authenticates_id"], ["id"], onupdate="CASCADE", ondelete="CASCADE")
    op.add_column("user", sa.Column("description", sa.String(), nullable=True))
    op.add_column("user", sa.Column("description_vector", TSVectorType(), sa.Computed("to_tsvector('pg_catalog.simple', 'description')", persisted=True), nullable=False))
    op.add_column("user", sa.Column("country", postgresql.ARRAY(CountryType(length=2)), nullable=True))
    op.add_column("user", sa.Column("spatial", sa.String(), nullable=True))
    op.add_column("user", sa.Column("language", LocaleType(), nullable=True))
    op.create_index(op.f("ix_user_description"), "user", ["description"], unique=False)
    op.create_index("ix_user_description_vector", "user", ["description_vector"], unique=False, postgresql_using="gin")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_user_description_vector", table_name="user", postgresql_using="gin")
    op.drop_index(op.f("ix_user_description"), table_name="user")
    op.drop_column("user", "language")
    op.drop_column("user", "spatial")
    op.drop_column("user", "country")
    op.drop_column("user", "description_vector")
    op.drop_column("user", "description")
    op.drop_constraint("token_authenticates_id_fkey", "token", type_="foreignkey")
    op.create_foreign_key("token_authenticates_id_fkey", "token", "user", ["authenticates_id"], ["id"])
    op.drop_index(op.f("ix_resourcetitle_title"), table_name="resourcetitle")
    op.drop_index(op.f("ix_resourcetitle_id"), table_name="resourcetitle")
    op.drop_index("ix_resource_title_vector", table_name="resourcetitle", postgresql_using="gin")
    op.drop_table("resourcetitle")
    op.drop_index(op.f("ix_resourcedescription_id"), table_name="resourcedescription")
    op.drop_index(op.f("ix_resourcedescription_description"), table_name="resourcedescription")
    op.drop_index("ix_resource_description_vector", table_name="resourcedescription", postgresql_using="gin")
    op.drop_table("resourcedescription")
    op.drop_index(op.f("ix_resourcecontent_id"), table_name="resourcecontent")
    op.drop_table("resourcecontent")
    op.drop_index(op.f("ix_comment_id"), table_name="comment")
    op.drop_table("comment")
    op.drop_index(op.f("ix_response_id"), table_name="response")
    op.drop_table("response")
    op.drop_index(op.f("ix_resource_id"), table_name="resource")
    op.drop_table("resource")
    op.drop_index(op.f("ix_nodequestion_question"), table_name="nodequestion")
    op.drop_index(op.f("ix_nodequestion_id"), table_name="nodequestion")
    op.drop_table("nodequestion")
    op.drop_index(op.f("ix_nodeform_id"), table_name="nodeform")
    op.drop_table("nodeform")
    op.drop_index(op.f("ix_themetitle_title"), table_name="themetitle")
    op.drop_index(op.f("ix_themetitle_id"), table_name="themetitle")
    op.drop_index("ix_theme_title_vector", table_name="themetitle", postgresql_using="gin")
    op.drop_table("themetitle")
    op.drop_index(op.f("ix_themedescription_id"), table_name="themedescription")
    op.drop_index(op.f("ix_themedescription_description"), table_name="themedescription")
    op.drop_index("ix_theme_description_vector", table_name="themedescription", postgresql_using="gin")
    op.drop_table("themedescription")
    op.drop_table("theme_subject")
    op.drop_index(op.f("ix_node_id"), table_name="node")
    op.drop_table("node")
    op.drop_table("user_subject")
    op.drop_index(op.f("ix_theme_id"), table_name="theme")
    op.drop_table("theme")
    op.drop_index(op.f("ix_role_id"), table_name="role")
    op.drop_table("role")
    op.drop_index(op.f("ix_pathwaytitle_title"), table_name="pathwaytitle")
    op.drop_index(op.f("ix_pathwaytitle_id"), table_name="pathwaytitle")
    op.drop_index("ix_pathway_title_vector", table_name="pathwaytitle", postgresql_using="gin")
    op.drop_table("pathwaytitle")
    op.drop_index(op.f("ix_pathwaydescription_id"), table_name="pathwaydescription")
    op.drop_index(op.f("ix_pathwaydescription_description"), table_name="pathwaydescription")
    op.drop_index("ix_pathway_description_vector", table_name="pathwaydescription", postgresql_using="gin")
    op.drop_table("pathwaydescription")
    op.drop_table("pathway_subject")
    op.drop_index(op.f("ix_invitation_id"), table_name="invitation")
    op.drop_index(op.f("ix_invitation_full_name"), table_name="invitation")
    op.drop_index(op.f("ix_invitation_email"), table_name="invitation")
    op.drop_table("invitation")
    op.drop_table("group_subject")
    op.drop_index("ix_subject_term_vector", table_name="subject", postgresql_using="gin")
    op.drop_index(op.f("ix_subject_term"), table_name="subject")
    op.drop_index(op.f("ix_subject_id"), table_name="subject")
    op.drop_table("subject")
    op.drop_index(op.f("ix_pathway_id"), table_name="pathway")
    op.drop_table("pathway")
    op.drop_index("ix_group_title_vector", table_name="group", postgresql_using="gin")
    op.drop_index(op.f("ix_group_title"), table_name="group")
    op.drop_index(op.f("ix_group_id"), table_name="group")
    op.drop_index("ix_group_description_vector", table_name="group", postgresql_using="gin")
    op.drop_index(op.f("ix_group_description"), table_name="group")
    op.drop_table("group")
    # ### end Alembic commands ###
